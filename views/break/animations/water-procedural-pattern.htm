<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ocean Animation</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            overflow: hidden;
            background: linear-gradient(to bottom, #6c6494, #0e1a37, #061111);
        }

        canvas {
            display: block;
            width: 100vw;
            height: 100vh;
        }

        .countdown-bar {
            position: absolute;
            width: 80%;
            height: 5px;
            background-color: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            overflow: hidden;
        }

        .progress {
            width: 100%;
            height: 100%;
            background: linear-gradient(to right, #FF9800, #FF5722);
            border-radius: 10px;
            transition: width 1s linear;
        }

        #countdown, #countdown2 {
            top: 23%;
            left: 50%;
            transform: translateX(-50%);
        }

        .break-text-container {
            position: absolute;
            top: 15%;
            left: 50%;
            transform: translateX(-50%);
            font-size: 24px;
            color: white;
            text-align: center;
        }

        .letter {
            display: inline-block;
            animation: bounce 4s infinite;
            transform: scaleX(1.1);
        }

        .cloud-container, .bird-container {
            position: absolute;
            top: -20%;
            left: -20%;
            width: 140%;
            height: 140%;
        }

        .cloud, .bird {
            color: white;
            opacity: 0.8;
            position: absolute;
            font-weight: bold;
            animation-timing-function: linear;
        }

        @keyframes bounce {
            0%, 100% {
                transform: translateY(0);
            }
            50% {
                transform: translateY(-20px);
            }
        }
    </style>
</head>
<body>
    <canvas id="canvas"></canvas>
    <div class="countdown-bar" id="countdown">
        <div class="progress" id="progress"></div>
    </div>
    <div class="countdown-bar" id="countdown2">
        <div class="progress" id="progress2"></div>
    </div>
    <div class="break-text-container" id="breakTextContainer">
        <span class="letter" style="animation-delay:0s">B</span>
        <span class="letter" style="animation-delay:0.1s">r</span>
        <span class="letter" style="animation-delay:0.2s">e</span>
        <span class="letter" style="animation-delay:0.3s">a</span>
        <span class="letter" style="animation-delay:0.4s">k</span>
        <span class="letter" style="animation-delay:0.5s"></span>
        <span class="letter" style="animation-delay:0.6s">U</span>
        <span class="letter" style="animation-delay:0.7s">n</span>
        <span class="letter" style="animation-delay:0.8s">d</span>
        <span class="letter" style="animation-delay:0.9s">e</span>
        <span class="letter" style="animation-delay:1s">r</span>
        <span class="letter" style="animation-delay:1.1s">w</span>
        <span class="letter" style="animation-delay:1.2s">a</span>
        <span class="letter" style="animation-delay:1.3s">y</span>
        <span class="letter" style="animation-delay:1.4s">.</span>
        <span class="letter" style="animation-delay:1.5s">.</span>
        <span class="letter" style="animation-delay:1.6s">.</span>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/simplex-noise/2.4.0/simplex-noise.min.js"></script>
    <script>
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        const noise = new SimplexNoise();
        let time = 0, waveOffsetX = 0, waveOffsetY = 0, countdownLength = 60, countdownTimer;

        function getColor(waveValue, waveHeight) {
            const colors = ['#0D47A1', '#1976D2', '#64B5F6', '#B3E5FC', '#FFFFFF', '#FFEB3B', '#FFC107', '#FF9800'];
            const index = Math.floor((waveValue + waveHeight) / (2 * waveHeight / (colors.length - 1)));
            return colors[index];
        }

        function drawOcean() {
            const gridSize = 10, waveHeight = 40, majorWaveAmplitude = 20, majorWaveFrequency = 0.005, noiseScale = 0.005, offsetX = waveOffsetX - (canvas.width / 2), offsetY = waveOffsetY - (canvas.height / 2);
            for (let x = canvas.width; x >= 0; x -= gridSize) {
                for (let y = 0; y < canvas.height; y += gridSize) {
                    const noiseValue = noise.noise2D((x - time * 50 + offsetX) * noiseScale, (y - offsetY) * noiseScale);
                    const wave = noiseValue * waveHeight, majorWavePhase = ((x + offsetX) / canvas.width) * 2 * Math.PI, majorWave = Math.sin(time * majorWaveFrequency + majorWavePhase) * majorWaveAmplitude;
                    ctx.beginPath();
                    ctx.moveTo(x, y + canvas.height / 2 + wave + majorWave);
                    ctx.quadraticCurveTo(x - gridSize / 2, y + canvas.height / 2 + wave + 10 + majorWave, x - gridSize, y + canvas.height / 2 + wave + majorWave);
                    ctx.lineTo(x - gridSize, y + canvas.height / 2 + wave + gridSize + majorWave);
                    ctx.lineTo(x, y + canvas.height / 2 + wave + gridSize + majorWave);
                    ctx.closePath();
                    const color = getColor(wave, waveHeight);
                    ctx.fillStyle = color;
                    ctx.fill();
                }
            }
        }

        function animate() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            drawOcean();
            time += 0.01;
            requestAnimationFrame(animate);
        }

        function setCanvasSize() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        }

        setCanvasSize();

        window.addEventListener('load', function () {
            animate();
            startCountdown();
            createClouds();
            createBirds();
            animateClouds();
            animateBirds();
        });

        function startCountdown() {
            countdownTimer = setInterval(updateCountdown, 1000);
        }

        function updateCountdown() {
            const progress = document.getElementById('progress'),
                percent = (countdownLength / 60) * 100;
            progress.style.width = `${percent}%`;
            const progress2 = document.getElementById('progress2');
            progress2.style.width = `${percent}%`;
            if (countdownLength === 0) {
                clearInterval(countdownTimer);
                progress.style.width = '0';
                progress2.style.width = '0';
                document.getElementById('breakTextContainer').textContent = 'Break Complete';
            } else {
                countdownLength--;
            }
        }

        function createClouds() {
            const cloudContainer = document.createElement('div');
            cloudContainer.classList.add('cloud-container');
            for (let i = 0; i < 5; i++) {
                const cloud = document.createElement('div');
                cloud.classList.add('cloud');
                cloud.innerHTML = 
                `
                  <pre style="font-family: 'Courier New', Courier, monospace; font-weight: bold;">
                    //\_//\\
                    ( (o.o) )
                     >^<
                     /
                  </pre>
                `;
                cloudContainer.appendChild(cloud);
            }
            document.body.appendChild(cloudContainer);
        }

        function createBirds() {
            const birdContainer = document.createElement('div');
            birdContainer.classList.add('bird-container');
            for (let i = 0; i < 3; i++) {
                const bird = document.createElement('div');
                bird.classList.add('bird');
                bird.innerHTML =
                `
                  <pre style="font-family: 'Courier New', Courier, monospace; font-weight: bold;">
                    ___/\\______
                   \\            (o>
                    \\____    ___/
                          |__/
                  </pre>
                `;
                birdContainer.appendChild(bird);
            }
            document.body.appendChild(birdContainer);
        }

        function animateClouds() {
            const clouds = document.querySelectorAll('.cloud');
            clouds.forEach((cloud, index) => {
                cloud.animate([{ transform: 'translate(-20%, 60%)' }, { transform: 'translate(120%, 70%)' }], {
                    duration: Math.random() * 20000 + 20000,
                    iterations: Infinity,
                    easing: 'linear',
                    delay: index * 3000 // Stagger the animation
                });
            });
        }

        function animateBirds() {
            const birds = document.querySelectorAll('.bird');
            birds.forEach((bird, index) => {
              bird.animate([{ transform: 'translate(-20%, 70%)' }, { transform: 'translate(120%, 70%)' }], {
                    duration: Math.random() * 20000 + 20000,
                    iterations: Infinity,
                    easing: 'linear',
                    delay: index * 3000 // Stagger the animation
                });
            });
        }    </script>
</body>
</html>
